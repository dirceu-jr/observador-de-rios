var
    seq = 0,
    delays = 80,
    durations = 500,
    refresh_stations_interval;

// activate collapse right menu when the windows is resized
$(window).resize(function () {
    setTimeout(function () {
        stations.initDashboardPageCharts();
    }, 500);
});

var stations = {

    current_status_ids: [],
    cwb_station: null,
    dataLayer2: null,

    renderChart: function(holder, data_name) {

        var
            labels = [],
            series = [],
            past_time_labels = ['-35m', '-30m', '-25m', '-20m', '-15m', '-10m', '-5m']
        ;

        for (status in statuses) {
            labels.push(past_time_labels[status]);
            series.push(statuses[status][data_name]);
        }

        var dataChart = {
            labels: labels,
            series: [
                series
            ]
        }

        var optionsChart = {
            //   lineSmooth: Chartist.Interpolation.cardinal({
            //     tension: 0
            //   }),
            low: 0,
            high: 20, // creative tim: we recommend you to set the high sa the biggest value + something for a better look
            chartPadding: {
                top: 0,
                right: 0,
                bottom: 0,
                left: 0
            },
            plugins: [
                Chartist.plugins.tooltip({
                    appendToBody: true
                })
            ]
        }

        var Chart = new Chartist.Line(holder, dataChart, optionsChart);

        stations.startAnimationForLineChart(Chart);
    },

    renderSingleStationMap: function() {
        if ($('#single_station_map').length != 0) {

            var
                map,
                legendControl;
    
            // Initialize the map
            if (statuses[0]) {
                map = L.map('single_station_map').setView([statuses[0].latitude, statuses[0].longitude], 15);
            } else {
                map = L.map('single_station_map').setView([-25.379659, -49.194844], 15);
            }
    
            var baseLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                detectRetina: true,
                attribution: "<a target='_blank' href='https://www.openstreetmap.org/'>OpenStreetMap</a>"
            });
    
            baseLayer.addTo(map);
    
            // Initialize the legend control and add it to the map
            var legendControl = new L.Control.Legend();
    
            legendControl.addTo(map);
    
            // custom icon prototype
            var station_icon = L.icon({
                iconUrl: "<%= asset_path("paper-boat.png") %>",
                iconSize: [36, 36]
            });
    
            if (statuses[0]) {
                stations.cwb_station = L.marker([statuses[0].latitude, statuses[0].longitude], {
                    icon: station_icon
                }).addTo(map);
            }
    
            var
                track = []
            ;
                
            for (var i = statuses.length; i--;) {
                track.push({
                    "lat": statuses[i].latitude,
                    "lon": statuses[i].longitude,
                    "ele": statuses[i].ph
                });
                stations.current_status_ids.push(statuses[i].id);
            }
    
            var data2 = {
                "gpx": {
                    "wpt": track
                }
            }
    
            this.dataLayer2 = new L.FlowLine(data2, {
                recordsField: 'gpx.wpt',
                locationMode: L.LocationModes.LATLNG,
                latitudeField: 'lat',
                longitudeField: 'lon',
                legendOptions: {
                    className: 'legend-line',
                    numSegments: 20
                },
                tooltipOptions: {
                    className: 'line-legend leaflet-div-icon',
                    iconSize: null
                },
                displayOptions: {
                    ele: {
                        displayName: 'Qualidade da Ã¡gua',
                        weight: 8,
                        color: new L.HSLHueFunction([0, 120], [16, -30])
                    }
                },
                layerOptions: {
                    opacity: 1.0
                }
            });
            map.addLayer(this.dataLayer2);
        }
    },

    startDashboardRefreshInterval: function() {

        var
            original_title = $(".navbar-brand").html().split("-")[0],
            time_to_refresh = 30,
            time_to_refresh_counter = time_to_refresh;

        // auto refresh
        refresh_stations_interval = setInterval(function () {
            
            $(".navbar-brand").html(original_title + " &mdash; Atualizando em " + (time_to_refresh_counter) + " segundos <img src='<%= asset_path "ajax-loader.gif" %>' />");

            time_to_refresh_counter--;

            if (time_to_refresh_counter <= 0) {
                time_to_refresh_counter = time_to_refresh;

                $.ajax({
                    url: "/stations/" + params_id + ".json"
                }).done(function (data) {
                    statuses = data.statuses;

                    // updates dashboard
                    $("#station-navigated").html(data.navigated + " <small>KM</small>");
                    $("#colected_count").text(data.status_count);
                    $("#photos_count").text(data.photos_count);

                    // updates charts
                    stations.initDashboardPageCharts();

                    // updates time_ago in charts
                    var access_time = '<i class="material-icons">access_time</i> ';

                    $('.stats.pHChart').html(access_time + statuses[0].time_ago);
                    $('.stats.ORPChart').html(access_time + statuses[0].time_ago);
                    $('.stats.DOChart').html(access_time + statuses[0].time_ago);
                    $('.stats.conductivityChart').html(access_time + statuses[0].time_ago);
                    $('.stats.temperatureChart').html(access_time + statuses[0].time_ago);
                    $('.stats.co2Chart').html(access_time + statuses[0].time_ago);

                    // add top map only when new statuses
                    for (status in statuses) {
                        if (stations.current_status_ids.indexOf(statuses[status].id) == -1) {
                            stations.cwb_station.setLatLng([statuses[status].latitude, statuses[status].longitude]);
                            stations.dataLayer2.addRecord({
                                "lat": statuses[status].latitude,
                                "lon": statuses[status].longitude,
                                "ele": statuses[status].do
                            });
                            stations.current_status_ids.push(statuses[status].id);
                        }
                    }
                    
                    var photos_html = [];
                    for (photo in data.photos) {
                        photos_html.push(
                            '<div class="col-md-3">',
                                '<div class="card card-chart">',
                                    '<div class="card-header card-header-info">',
                                        '<img src="' + data.photos[photo].file.thumb.url + '" data-full_size="' + data.photos[photo].file.url + '" width="100%" onclick="stations.openModal(this);"></img>',
                                    '</div>',
                                    '<div class="card-footer">',
                                        '<div class="stats">',
                                            '<i class="material-icons">access_time</i> ' + data.photos[photo].time_ago,
                                        '</div>',
                                    '</div>',
                                '</div>',
                            '</div>'
                        )
                    }
                    $(".photos").html(photos_html.join(""));                    

                });

            }

        }, 1000);

    },

    initDashboardPageCharts: function () {

        // only do that in dashboard (station) page
        if (
            ($('#pHChart').length != 0 &&
                $('#ORPChart').length != 0 &&
                $('#DOChart').length != 0 &&
                $('#conductivityChart').length != 0 &&
                $('#temperatureChart').length != 0 &&
                $('#co2Chart').length != 0) && statuses
        ) {

            var past_time_labels = ['-35m', '-30m', '-25m', '-20m', '-15m', '-10m', '-5m'];

            /* ----------==========     pH     ==========---------- */
            this.renderChart('#pHChart', "ph");

            /* ----------==========     ORP     ==========---------- */
            this.renderChart('#ORPChart', "orp");

            /* ----------==========     Dissolved Oxygen     ==========---------- */
            this.renderChart('#DOChart', "od");

            /* ----------==========     Conductivity Oxygen     ==========---------- */
            this.renderChart('#conductivityChart', "conductivity");

            /* ----------==========     Temperature     ==========---------- */
            this.renderChart('#temperatureChart', "temperature");

            /* ----------==========     CO2     ==========---------- */
            this.renderChart('#co2Chart', "co2");
        }
    },

    startAnimationForLineChart: function (chart) {

        chart.on('draw', function (data) {
            if (data.type === 'line' || data.type === 'area') {
                data.element.animate({
                    d: {
                        begin: 600,
                        dur: 700,
                        from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),
                        to: data.path.clone().stringify(),
                        easing: Chartist.Svg.Easing.easeOutQuint
                    }
                });
            } else if (data.type === 'point') {
                seq++;
                data.element.animate({
                    opacity: {
                        begin: seq * delays,
                        dur: durations,
                        from: 0,
                        to: 1,
                        easing: 'ease'
                    }
                });
            }
        });

        seq = 0;
    },

    openModal: function (el) {
        var full_size = $(el).data('full_size');
        $('#modal-body').html('<img width="766" src="' + full_size + '" />');
        $('#modal').modal({});
    }
}